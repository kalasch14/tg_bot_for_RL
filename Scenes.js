
const {
    Telegraf,
    Scenes: { BaseScene, Stage }
} = require("telegraf");

const UserModel = require('./models/user')
const TaskModel = require('./models/task')

const { Keyboard, Key } = require("telegram-keyboard")

let TaskArr = []


class ScenesGenerator {

//–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    constructor(task, worker, priority, deadline){
        this.task = task
        this.worker = worker
        this.priority = priority
        this.deadline = deadline
    }



    TaskGen() {
        const task = new BaseScene('task')
        task.enter(async (ctx) => {
            await ctx.reply('–£–∫–∞–∂–∏ –∑–∞–¥–∞–Ω–∏–µ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é')
        })
        task.on('text', async (ctx) => {
            const currentTask = String(ctx.message.text)

            if(currentTask){
                this.task = currentTask
                ctx.scene.enter('worker')
            }
        })
        task.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })

        return task
    }


//–í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞

    WorkerGen(){
        const worker = new BaseScene('worker')

        worker.enter(async (ctx) => {
            await ctx.reply('–£–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        })

        worker.on('text', async (ctx) => {
            const currentWorker = String(ctx.message.text)

            if(currentWorker){
                this.worker = currentWorker
                ctx.scene.enter('priority')
            }
        })

        worker.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return worker
    }

//–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏

    PriorityGen(){
        const priority = new BaseScene('priority')

        priority.enter(async (ctx) => {
            await ctx.reply('–û–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è', priorityKeyboard)
        })

    

        priority.on('callback_query', async (ctx) => {
            
            const priorityLevel = String(ctx.callbackQuery.data)

            if(priorityLevel){
                this.priority = priorityLevel
                ctx.scene.enter('deadline')
            }
        })

        priority.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return priority

    }


    //–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è

    DeadlineGen(){
        const deadline = new BaseScene('deadline')

        deadline.enter(async (ctx) => {
            await ctx.reply('–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è')
        })

        deadline.on('text', async (ctx) => {
            const dl = String(ctx.message.text)

            if(dl){
                this.deadline = dl
                await ctx.reply(`
                \n–ó–∞–¥–∞–Ω–∏–µ: ${ this.task }
                \n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${ this.worker }
                \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ this.priority }
                \n–î–µ–¥–ª–∞–π–Ω: ${ this.deadline }
                `)
                //await TaskModel.create({ priority: this.priority, dateEnd: this.deadline, worker: this.worker, text: this.task, initiator: ctx.from.id, isDone: false})
                //ctx.scene.leave()
                ctx.scene.enter('isOk')
            }
        })

        deadline.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return deadline

    }


    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å

    IsOkGen(){
        const isOk = new BaseScene('isOk')

        isOk.enter(async (ctx) => {
            await ctx.reply('–í—Å–µ –≤–µ—Ä–Ω–æ?', isOkKeyboard)
        })

    

        isOk.on('callback_query', async (ctx) => {
            
            const ok = String(ctx.callbackQuery.data)

            if(ok === '‚úÖ'){

                await TaskModel.create({

                    priority: this.priority,
                    dateEnd: this.deadline,
                    worker: this.worker,
                    text: this.task,
                    initiator: ctx.from.id,
                    isDone: false
                })
                ctx.reply('–ì–æ—Ç–æ–≤–æ!')

                ctx.scene.leave()

            } else if(ok === '‚ùå'){
                ctx.reply('–ü–æ–≤—Ç–æ—Ä–∏–º')
                ctx.scene.enter('task')
            }
        })

        isOk.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return isOk
    }


    OutboundGen(){
        const outbound = new BaseScene('outbound')
        
        outbound.enter(async (ctx) => {
            
            
            const task = await TaskModel.findAll({
                where: {
                    initiator: ctx.from.id
                }
            })

            console.log(task);

            if(task.length == 0){
                await ctx.reply('–ù–µ—Ç—É –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π')
            } else {

                await ctx.reply('–ó–∞–¥–∞–Ω–∏—è, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã–µ –º–Ω–æ—é:')
                
                for(let i = 0; i < task.length; i++){
                

                    const deleteKeyboard = Keyboard.make([
                        [Key.callback('üóë', task[i].dataValues.id)],
                      ]).inline()


                    await ctx.reply(`
                        \n–ó–∞–¥–∞–Ω–∏–µ: ${task[i].dataValues.text},
                        \n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task[i].dataValues.worker},
                        \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task[i].dataValues.priority},
                        \n–î–µ–¥–ª–∞–π–Ω: ${task[i].dataValues.dateEnd},
                        \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${task[i].dataValues.isDone},
                        \n–í—Ä–µ–º—è –°–æ–∑–¥–∞–Ω–∏—è: ${task[i].dataValues.createdAt}
                    `,
                    deleteKeyboard)
                    
                }
            }
        })

                    outbound.on('callback_query', async (ctx) => {
            
                        
                        console.log('\nsdssdsd\nsdssdsd\nsdssdsd\nsdssdsd\nsdssdsd');
                        console.log(ctx);
                        console.log('\nsdssdsd\nsdssdsd\nsdssdsd\nsdssdsd\nsdssdsd');
            
                        if(ctx.callbackQuery.data){
                            try {
    
                                TaskModel.destroy({
                                    where: {
                                        id: ctx.callbackQuery.data
                                    }
                                })
                                await ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –£–¥–∞–ª–µ–Ω–æ!')
                                ctx.scene.leave()
                        
                            } catch (e) {
                                console.log(e);
                            }
            
                            //await ctx.scene.leave()
                        } else await ctx.reply('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa')
                        ctx.scene.leave()
                    })


    
        return outbound

    }

}




    
const priorityKeyboard = Keyboard.make([
    [Key.callback('–í—ã—Å–æ–∫–æ','–í—ã—Å–æ–∫–æ')],
    [Key.callback('–°—Ä–µ–¥–Ω–µ','–°—Ä–µ–¥–Ω–µ')],
    [Key.callback('–ù–∏–∑–∫–æ','–ù–∏–∑–∫–æ')],
  ]).inline()


const isOkKeyboard = Keyboard.make([
    [Key.callback('‚úÖ','‚úÖ')],
    [Key.callback('‚ùå','‚ùå')]
  ]).inline()

// const deleteKeyboard = Keyboard.make([
//     [Key.callback('üóë','üóë')],
//   ]).inline()


module.exports = ScenesGenerator