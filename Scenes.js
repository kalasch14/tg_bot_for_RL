
const {
    Scenes: { BaseScene }
} = require("telegraf");

const UserModel = require('./models/user')
const TaskModel = require('./models/task')
const { Keyboard, Key } = require("telegram-keyboard");
const { Sequelize } = require("sequelize");

const parseDate = require('./middleware/parseDate')
const isDone = require('./middleware/isDone')

class ScenesGenerator {
    
    //---------------------------------------------------------------

    //–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è

    //---------------------------------------------------------------

    TaskGen() {
        const task = new BaseScene('task')
        task.enter(async (ctx) => {
            await ctx.reply(`
            \n–£–∫–∞–∂–∏ –∑–∞–¥–∞–Ω–∏–µ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é
            \n–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "/"
            `)
        })
        task.on('text', async (ctx) => {
            const currentTask = String(ctx.message.text)


            if(ctx.message.text !== '/'){
                ctx.session.dataStorage.task = currentTask
                //this.task = currentTask
                ctx.scene.enter('worker')
            } else {
                ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
                ctx.scene.leave()
            }
        })

        task.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })

        return task
    }


    //---------------------------------------------------------------

    //–í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞

    //---------------------------------------------------------------

    WorkerGen(){
        
        const worker = new BaseScene('worker')

        worker.enter(async (ctx) => {
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:')

            const usersList = await UserModel.findAll({
                where: {
                    chatId: {
                        [Sequelize.Op.not]: ctx.message.from.id 
                    }
                }
            })

            for(let i = 0; i < usersList.length; i++){
                const userListKeyboard = Keyboard.make([
                    [Key.callback('üë®üèª', usersList[i].chatId)]
                  ]).inline()
                await ctx.reply(usersList[i].fullName ,userListKeyboard)
            }

        })

        worker.on('callback_query', async (ctx) => {
            
            const uid = ctx.callbackQuery.data

                ctx.session.dataStorage.user = await UserModel.findOne({
                    where: {
                        chatId: uid
                    }
                })

                
                ctx.scene.enter('priority')
            
        })

        worker.on('message', (ctx) => {
            if (ctx.message.text == '/') {
                ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
                ctx.scene.leave()
            } else {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
            }
        })



        //—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç-----------------------------------------------------------------------------

        // worker.enter(async (ctx) => {
        //     await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        // })

        // worker.on('text', async (ctx) => {

        //     const currentWorker = String(ctx.message.text)

            

            // ctx.session.dataStorage.user = await UserModel.findOne({
            //     where: {
            //         username: currentWorker
            //     }
            // })

            // if(ctx.session.dataStorage.user == null){
            //     ctx.session.dataStorage.user = await UserModel.findOne({
            //         where: {
            //             fullName: currentWorker
            //         }
            //     })
            // }

        //     if(ctx.message.text == '/'){
        //         ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
        //         ctx.scene.leave()
        //     } else if(ctx.session.dataStorage.user == null) {
        //         await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        //         ctx.scene.reenter()
        //     } else ctx.session.dataStorage.flag = 1

        //     if(ctx.session.dataStorage.flag == 1){
        //         ctx.session.dataStorage.flag = 0
        //         //this.worker = currentWorker
        //         ctx.scene.enter('priority')
        //     }
        // })

        // worker.on('message', (ctx) => {
        //     ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        //     ctx.scene.reenter()
        // })

        //---------------------------------------------------------------------------------------------

        return worker
    }

    //---------------------------------------------------------------

    //–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏

    //--------------------------------------------------------------

    PriorityGen(){
        const priority = new BaseScene('priority')

        priority.enter(async (ctx) => {
            await ctx.reply('–û–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è', priorityKeyboard)
        })


        priority.on('text', async (ctx) => {
            if(ctx.message.text == '/'){
                ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
                ctx.scene.leave()
            }
        })
    

        priority.on('callback_query', async (ctx) => {
            
            const priorityLevel = String(ctx.callbackQuery.data)

            if(priorityLevel){
                ctx.session.dataStorage.priority = priorityLevel
                ctx.scene.enter('deadline')
            }
        })

        priority.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return priority

    }


    

    //---------------------------------------------------------------

    //–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è

    //--------------------------------------------------------------

    DeadlineGen(){
        
        const deadline = new BaseScene('deadline')



        deadline.enter(async (ctx) => {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥.–º–º.–¥–¥')
            ctx.session.dataStorage.flag = 0
        })

        deadline.on('text', async (ctx) => {
            ctx.session.dataStorage.flag = 0
            let enteredDate = String(ctx.message.text)

            if(enteredDate == '/'){
                await ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
                ctx.session.dataStorage.flag = 1
                await ctx.scene.leave()
            }

            enteredDate = enteredDate.split('.')

            enteredDate = new Date(Date.UTC(enteredDate[0], enteredDate[1]-1, enteredDate[2]))

            let currDate = Date.parse(new Date)


            if (enteredDate == "Invalid Date" && ctx.session.dataStorage.flag == 0) {

                await ctx.reply('–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!').then(ctx.session.dataStorage.flag = 1).then(ctx.scene.reenter())
                
            } 
            
            if (ctx.session.dataStorage.flag == 0 && (Date.parse(enteredDate) <  currDate) && enteredDate != "Invalid Date"){
                await ctx.reply('–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!').then(ctx.session.dataStorage.flag = 1).then(ctx.scene.reenter())
                
            } else if(ctx.session.dataStorage.flag == 0 && enteredDate != "Invalid Date"){
                        ctx.session.dataStorage.deadline = enteredDate
                        await ctx.reply(`
                        \n–ó–∞–¥–∞–Ω–∏–µ: ${ ctx.session.dataStorage.task }
                        \n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${ ctx.session.dataStorage.user.fullName }
                        \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ ctx.session.dataStorage.priority }
                        \n–î–µ–¥–ª–∞–π–Ω: ${ parseDate(ctx.session.dataStorage.deadline) }
                        `)
                        ctx.scene.enter('isOk')
                    } else if (ctx.session.dataStorage.flag == 0 && enteredDate != "Invalid Date"){
                        await ctx.reply('–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!').then(ctx.session.dataStorage.flag = 1).then(ctx.scene.reenter())
                    }

        })
            

        return deadline

    }


    //---------------------------------------------------------------

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å

    //--------------------------------------------------------------


    IsOkGen(){
        const isOk = new BaseScene('isOk')

        isOk.enter(async (ctx) => {
            await ctx.reply('–í—Å–µ –≤–µ—Ä–Ω–æ?', isOkKeyboard)
        })

    
        isOk.on('callback_query', async (ctx) => {
            
            const ok = String(ctx.callbackQuery.data)

            if(ok === '‚úÖ'){

                await TaskModel.create({

                    priority: ctx.session.dataStorage.priority,
                    dateEnd: ctx.session.dataStorage.deadline,
                    worker: ctx.session.dataStorage.user.fullName,
                    text: ctx.session.dataStorage.task,
                    initiator: ctx.from.id,
                    isDone: false,
                    chatId: ctx.session.dataStorage.user.chatId,
                    initiatorName: ctx.from.first_name + ' ' + ctx.from.last_name
                    
                })

                ctx.reply('–ì–æ—Ç–æ–≤–æ!')

                let sender = ''

                if(!ctx.from.last_name){
                    sender = ctx.from.first_name
                } else sender = `${ctx.from.first_name} ${ctx.from.last_name}`

                ctx.telegram.sendMessage(ctx.session.dataStorage.user.chatId, `
                \n–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç ${sender}
                \n–ó–∞–¥–∞–Ω–∏–µ: ${ ctx.session.dataStorage.task }
                \n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${ ctx.session.dataStorage.user.fullName }
                \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ ctx.session.dataStorage.priority }
                \n–î–µ–¥–ª–∞–π–Ω: ${ parseDate(ctx.session.dataStorage.deadline) }
                `)

                ctx.scene.leave()

            } else if(ok === '‚ùå'){
               
                await ctx.reply('–ü–æ–≤—Ç–æ—Ä–∏–º')

                ctx.scene.enter('task')

            }
        })
    

        isOk.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return isOk
    }

    //---------------------------------------------------------------

    //–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è

    //--------------------------------------------------------------


    OutboundGen(){

        const outbound = new BaseScene('outbound')
        
        outbound.enter(async (ctx) => {
            
            const task = await TaskModel.findAll({
                where: {
                    initiator: ctx.from.id
                }
            })

            if(task.length == 0){
                await ctx.reply('–ù–µ—Ç—É –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π')
            } else {

                await ctx.reply('–ó–∞–¥–∞–Ω–∏—è, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã–µ –º–Ω–æ—é:')
                
                for(let i = 0; i < task.length; i++){
                

                    const deleteKeyboard = Keyboard.make([
                        [Key.callback('üóë', task[i].dataValues.id)],
                      ]).inline()


                    await ctx.reply(`
                        \n–ó–∞–¥–∞–Ω–∏–µ: ${task[i].dataValues.text},
                        \n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task[i].dataValues.worker},
                        \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task[i].dataValues.priority},
                        \n–î–µ–¥–ª–∞–π–Ω: ${parseDate(task[i].dataValues.dateEnd)},
                        \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${isDone(task[i].dataValues.isDone)},
                        \n–î–∞—Ç–∞ –°–æ–∑–¥–∞–Ω–∏—è: ${parseDate(task[i].dataValues.createdAt)}
                    `,
                    deleteKeyboard)
                    
                }
            }
        })

        outbound.on('callback_query', async (ctx) => {

            
            if(ctx.callbackQuery.data){
                try {

                    TaskModel.destroy({
                        where: {
                            id: ctx.callbackQuery.data
                        }
                    })
                    await ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –£–¥–∞–ª–µ–Ω–æ!')
                    ctx.scene.enter('outbound')
            
                } catch (e) {
                    console.log(e);
                }

            } else await ctx.reply('err')
            ctx.scene.leave()
        })
    
        return outbound

    }

    //---------------------------------------------------------------

    //–í—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è

    //--------------------------------------------------------------

    IncomingGen(){
        const incoming = new BaseScene('incoming')
        
        incoming.enter(async (ctx) => {
        
            const incomingTask = await TaskModel.findAll({
                where: {
                    chatId: ctx.from.id,
                    isDone: false
                }
            })


            if(incomingTask.length == 0){
                //await ctx.reply(ctx.from.id)
                await ctx.reply('–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π')
            } else {

                await ctx.reply('–í—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è: ')

                for(let i = 0; i < incomingTask.length; i++){

            
                    const doneKeyboard = Keyboard.make([
                        [Key.callback('–û—Ç–º–µ—Ç–∏—Ç—å –í—ã–ø–æ–ª–Ω–µ–Ω—ã–º', incomingTask[i].dataValues.id)],
                    ]).inline()

                    const user = await UserModel.findOne({
                        where: {
                            chatId: incomingTask[i].dataValues.initiator,
                        }
                    })

                    

                    await ctx.reply(`
                        \n–ó–∞–¥–∞–Ω–∏–µ: ${incomingTask[i].dataValues.text},
                        \n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user.fullName},
                        \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${incomingTask[i].dataValues.priority},
                        \n–î–µ–¥–ª–∞–π–Ω: ${parseDate(incomingTask[i].dataValues.dateEnd)},
                        \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${isDone(incomingTask[i].dataValues.isDone)},
                        \n–î–∞—Ç–∞ –°–æ–∑–¥–∞–Ω–∏—è: ${parseDate(incomingTask[i].dataValues.createdAt)}
                    `,
                    doneKeyboard)
                    
            
                }
                
            }
        })

        incoming.on('callback_query', async (ctx) => {
                
                            
            if(ctx.callbackQuery.data){
                try {

                    const incomingTask = await TaskModel.findOne({
                        where: {
                            id: ctx.callbackQuery.data
                        }
                    })

                    incomingTask.isDone = true

                    await incomingTask.save();
                    await ctx.reply('–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏!')

                    let sender = ''
                    if(!ctx.from.last_name){
                        sender = ctx.from.first_name
                    } else sender = `${ctx.from.first_name} ${ctx.from.last_name}`

                    ctx.telegram.sendMessage(incomingTask.initiator, `
                    \n${incomingTask.worker} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!
                    \n–ó–∞–¥–∞–Ω–∏–µ: ${ incomingTask.text }
                    \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ incomingTask.priority }
                    \n–î–µ–¥–ª–∞–π–Ω: ${ parseDate(incomingTask.dateEnd) }
                    \n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${ parseDate(incomingTask.createdAt) }
                    `)

            
                } catch (e) {
                    console.log(e);
                }

                //await ctx.scene.leave()
            } else await ctx.reply('err')
            ctx.scene.leave()
        })

        return incoming

    }


    //---------------------------------------------------------------

    //–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è

    //--------------------------------------------------------------

    DoneGen(){

        const done = new BaseScene('done')

        done.enter(async (ctx) => {

            const doneTask = await TaskModel.findAll({
                where: {
                    chatId: ctx.from.id,
                    isDone: true
                }
            })


            if(doneTask.length == 0){
                //await ctx.reply(ctx.from.id)
                await ctx.reply('–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π')
            } else {

                await ctx.reply('–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π')

                for(let i = 0; i < doneTask.length; i++){


                    const user = await UserModel.findOne({
                        where: {
                            chatId: doneTask[i].dataValues.initiator,
                        }
                    })


                    await ctx.reply(`
                        \n–ó–∞–¥–∞–Ω–∏–µ: ${doneTask[i].dataValues.text},
                        \n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user.fullName},
                        \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${doneTask[i].dataValues.priority},
                        \n–î–µ–¥–ª–∞–π–Ω: ${parseDate(doneTask[i].dataValues.dateEnd)},
                        \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${isDone(doneTask[i].dataValues.isDone)},
                        \n–î–∞—Ç–∞ –°–æ–∑–¥–∞–Ω–∏—è: ${parseDate(doneTask[i].dataValues.createdAt)}
                    `)
                    
            
                }

            }

        })

        return done

    }
//-----------------------------------------------------------------------------------------

//–≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è

//-----------------------------------------------------------------------------------------


    LoginGen(){

        const login = new BaseScene('login')

        login.enter(async (ctx) => {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å!')
        })

        login.on('text', async (ctx) => {
            if(ctx.message.text == 'parlament'){
    
                await ctx.scene.enter('dept')

            } else {
                await ctx.reply('–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π!')
                await ctx.scene.reenter()
            }
        })

        return login

    }


//-----------------------------------------------------------------------------------------

//–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω

//-----------------------------------------------------------------------------------------

    HelloGen(){
        const hello = new BaseScene('hello')

        hello.enter(async (ctx)=> {
            await ctx.reply('üëã')
            const keyboard = await Keyboard.make([
                ['–í—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è', '–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è'],
                ['–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'],
            ])

            //ctx.scene.enter('task')

            await ctx.reply(`
            \n–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:
            \n–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ - –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, —Å—Ç–∞–≤–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –¥–µ–¥–ª–∞–π–Ω. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.
            \n–í—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è - –∑–¥–∞–¥–∞–Ω–∏—è, –≥–¥–µ –í—ã —É–∫–∞–∑–∞–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º.
            \n–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è - –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Å–æ–∑–¥–∞–ª–∏.
            \n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - –∑–∞–¥–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤–∞–º–∏
            
            
            `, keyboard.reply())


            await ctx.scene.leave()


        })

        return hello
    }


    DepartGen(){
        const dept = new BaseScene('dept')
        
        dept.enter(async (ctx) => {
            await ctx.reply('–ï—Å—Ç—å, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç!(–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)', deptKeyboard)
        })

        dept.on('callback_query', async (ctx) => {

            ctx.session.dataStorage.userDept = ctx.callbackQuery.data

            await ctx.scene.enter('pos')

        })
        return dept
    }


    PositionGen(){
        const pos = new BaseScene('pos')

        pos.enter(async (ctx) => {
            if (ctx.callbackQuery.data == '–î–∏—Ä–µ–∫—Ü–∏—è') {

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)
                
            } else if (ctx.session.dataStorage.userDept == '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π'){

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)

            } else if (ctx.callbackQuery.data == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π'){

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)

            } else if (ctx.callbackQuery.data == '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è'){

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)

            } else if (ctx.callbackQuery.data == '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π'){

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)

            }
        })

        pos.on('callback_query', async ctx => {

            ctx.session.dataStorage.userPos = ctx.callbackQuery.data

            let name = ''

            if(ctx.chat.last_name == undefined){
                name = ctx.chat.first_name
            } else name = `${ctx.chat.last_name} ${ctx.chat.first_name}`
        

            await UserModel.create({

                chatId: ctx.chat.id,
                firstName: ctx.chat.first_name,
                lastName: ctx.chat.last_name,
                fullName: name,
                username: ctx.chat.username,
                dept: ctx.session.dataStorage.userDept,
                position: ctx.session.dataStorage.userPos

            })

            await ctx.scene.enter('hello')

        })

        return pos
    }
}



//keyboards

    
const priorityKeyboard = Keyboard.make([
    [Key.callback('–í—ã—Å–æ–∫–æ','–í—ã—Å–æ–∫–æ üî¥')],
    [Key.callback('–°—Ä–µ–¥–Ω–µ','–°—Ä–µ–¥–Ω–µ üü°')],
    [Key.callback('–ù–∏–∑–∫–æ','–ù–∏–∑–∫–æ üü¢')],
  ]).inline()


const isOkKeyboard = Keyboard.make([
    [Key.callback('‚úÖ','‚úÖ')],
    [Key.callback('‚ùå','‚ùå')]
  ]).inline()


const deptKeyboard = Keyboard.make([
    [Key.callback('–î–∏—Ä–µ–∫—Ü–∏—è','–î–∏—Ä–µ–∫—Ü–∏—è')],
    [Key.callback('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π','–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π')],
    [Key.callback('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π','–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π')],
    [Key.callback('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è','–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è')],
    [Key.callback('–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π','–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π')]
  ]).inline()

const positionKeyboard = Keyboard.make([
    [Key.callback('–î–∏—Ä–µ–∫—Ç–æ—Ä','–î–∏—Ä–µ–∫—Ç–æ—Ä')],
    [Key.callback('–ó–∞–º–î–∏—Ä','–ó–∞–º–î–∏—Ä')],
    [Key.callback('–†–∞–±–æ—Ç–Ω–∏–∫','–†–∞–±–æ—Ç–Ω–∏–∫')],
]).inline()

// const deleteKeyboard = Keyboard.make([
//     [Key.callback('üóë','üóë')],
//   ]).inline()


module.exports = ScenesGenerator