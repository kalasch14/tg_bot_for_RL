const {
    Scenes: { BaseScene }
} = require("telegraf");

const UserModel = require('../models/user')
const { Keyboard, Key } = require("telegram-keyboard");
const { Sequelize } = require("sequelize");


class LoginScenesGenerator {

    LoginGen(){

        const login = new BaseScene('login')

        login.enter(async (ctx) => {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å!')
        })

        login.on('text', async (ctx) => {
            if(ctx.message.text == 'parlament'){
    
                await ctx.scene.enter('dept')

            } else {
                await ctx.reply('–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π!')
                await ctx.scene.reenter()
            }
        })

        return login

    }

    HelloGen(){
        const hello = new BaseScene('hello')

        hello.enter(async (ctx)=> {
            await ctx.reply('üëã')
            const keyboard = await Keyboard.make([
                ['–í—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è', '–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è'],
                ['–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'],
            ])

            //ctx.scene.enter('task')

            await ctx.reply(`
            \n–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:
            \n–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ - –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, —Å—Ç–∞–≤–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –¥–µ–¥–ª–∞–π–Ω. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.
            \n–í—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è - –∑–¥–∞–¥–∞–Ω–∏—è, –≥–¥–µ –í—ã —É–∫–∞–∑–∞–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º.
            \n–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è - –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Å–æ–∑–¥–∞–ª–∏.
            \n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - –∑–∞–¥–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤–∞–º–∏
            
            
            `, keyboard.reply())


            await ctx.scene.leave()


        })

        return hello
    }


    DepartGen(){
        const dept = new BaseScene('dept')
        
        dept.enter(async (ctx) => {
            await ctx.reply('–ï—Å—Ç—å, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç!(–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)', deptKeyboard)
        })

        dept.on('callback_query', async (ctx) => {

            ctx.session.dataStorage.userDept = ctx.callbackQuery.data

            await ctx.scene.enter('pos')

        })
        return dept
    }


    PositionGen(){
        const pos = new BaseScene('pos')

        pos.enter(async (ctx) => {
            if (ctx.callbackQuery.data == '–î–∏—Ä–µ–∫—Ü–∏—è') {

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)
                
            } else if (ctx.session.dataStorage.userDept == '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π'){

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)

            } else if (ctx.callbackQuery.data == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π'){

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)

            } else if (ctx.callbackQuery.data == '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è'){

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)

            } else if (ctx.callbackQuery.data == '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π'){

                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ${ctx.session.dataStorage.userDept}`, positionKeyboard)

            }
        })

        pos.on('callback_query', async ctx => {

            ctx.session.dataStorage.userPos = ctx.callbackQuery.data

            let name = ''

            if(ctx.chat.last_name == undefined){
                name = ctx.chat.first_name
            } else name = `${ctx.chat.last_name} ${ctx.chat.first_name}`
        

            await UserModel.create({

                chatId: ctx.chat.id,
                firstName: ctx.chat.first_name,
                lastName: ctx.chat.last_name,
                fullName: name,
                username: ctx.chat.username,
                dept: ctx.session.dataStorage.userDept,
                position: ctx.session.dataStorage.userPos

            })

            await ctx.scene.enter('hello')

        })

        return pos
    }


}


const deptKeyboard = Keyboard.make([
    [Key.callback('–î–∏—Ä–µ–∫—Ü–∏—è','–î–∏—Ä–µ–∫—Ü–∏—è')],
    [Key.callback('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π','–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π')],
    [Key.callback('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π','–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π')],
    [Key.callback('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è','–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è')],
    [Key.callback('–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π','–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π')]
  ]).inline()

const positionKeyboard = Keyboard.make([
    [Key.callback('–î–∏—Ä–µ–∫—Ç–æ—Ä','–î–∏—Ä–µ–∫—Ç–æ—Ä')],
    [Key.callback('–ó–∞–º–î–∏—Ä','–ó–∞–º–î–∏—Ä')],
    [Key.callback('–†–∞–±–æ—Ç–Ω–∏–∫','–†–∞–±–æ—Ç–Ω–∏–∫')],
]).inline()


module.exports = LoginScenesGenerator