
const {
    Telegraf,
    session,
    Scenes: { BaseScene, Stage }
} = require("telegraf");

const UserModel = require('./models/user')
const TaskModel = require('./models/task')
const { Keyboard, Key } = require("telegram-keyboard")



class ScenesGenerator {
    //–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    // constructor(task, worker, priority, deadline, user, flag){
    //     this.task = task
    //     this.worker = worker
    //     this.priority = priority
    //     this.deadline = deadline
    //     this.user = user // —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    //     this.flag = flag // —Å–¥–µ–ª–∞–Ω–æ –∏–ª–∏ –Ω–µ—Ç
    // }
    

    //---------------------------------------------------------------

    //–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è

    //---------------------------------------------------------------

    TaskGen() {
        const task = new BaseScene('task')
        task.enter(async (ctx) => {
            await ctx.reply('–£–∫–∞–∂–∏ –∑–∞–¥–∞–Ω–∏–µ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é')
        })
        task.on('text', async (ctx) => {
            const currentTask = String(ctx.message.text)

            if(currentTask){
                ctx.session.dataStorage.task = currentTask
                
                //this.task = currentTask
                ctx.scene.enter('worker')
            }
        })
        task.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })

        return task
    }


    //---------------------------------------------------------------

    //–í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞

    //---------------------------------------------------------------

    WorkerGen(){
        
        const worker = new BaseScene('worker')

        worker.enter(async (ctx) => {
            await ctx.reply('–£–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        })

        worker.on('text', async (ctx) => {

            const currentWorker = String(ctx.message.text)

            ctx.session.dataStorage.user = await UserModel.findOne({
                where: {
                    username: currentWorker
                }
            })

            if(ctx.session.dataStorage.user == null){
                ctx.session.dataStorage.user = await UserModel.findOne({
                    where: {
                        fullName: currentWorker
                    }
                })
            } 
            if(ctx.session.dataStorage.user == null) {
                await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!')
                ctx.scene.reenter()
            } else ctx.session.dataStorage.flag = 1

            if(ctx.session.dataStorage.flag == 1){
                ctx.session.dataStorage.flag = 0
                //this.worker = currentWorker
                ctx.scene.enter('priority')
            }
        })

        worker.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return worker
    }

    //---------------------------------------------------------------

    //–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏

    //--------------------------------------------------------------

    PriorityGen(){
        const priority = new BaseScene('priority')

        priority.enter(async (ctx) => {
            await ctx.reply('–û–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è', priorityKeyboard)
        })

    

        priority.on('callback_query', async (ctx) => {
            
            const priorityLevel = String(ctx.callbackQuery.data)

            if(priorityLevel){
                ctx.session.dataStorage.priority = priorityLevel
                ctx.scene.enter('deadline')
            }
        })

        priority.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return priority

    }


    

    //---------------------------------------------------------------

    //–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è

    //--------------------------------------------------------------

    DeadlineGen(){
        const deadline = new BaseScene('deadline')

        deadline.enter(async (ctx) => {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥.–º–º.–¥–¥')
        })

        deadline.on('text', async (ctx) => {


            let dl = String(ctx.message.text)

            
            dl = dl.split('.')

            // for(let i = 0; i < 3; i++ ){
            //     if(dl[i] == undefined || parseInt(dl[i]) == NaN){
            //         ctx.scene.reenter()
            //     }
            // }

            dl = new Date(Date.UTC(dl[0], dl[1]-1, dl[2]));

            if(dl == "Invalid Date"){
                ctx.scene.reenter()
            } else ctx.session.dataStorage.flag = 1

            if(ctx.session.dataStorage.flag == 1){}


            if(ctx.session.dataStorage.flag == 1){
                ctx.session.dataStorage.flag = 0
                ctx.session.dataStorage.deadline = dl
                await ctx.reply(`
                \n–ó–∞–¥–∞–Ω–∏–µ: ${ ctx.session.dataStorage.task }
                \n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${ ctx.session.dataStorage.user.fullName }
                \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ ctx.session.dataStorage.priority }
                \n–î–µ–¥–ª–∞–π–Ω: ${ ctx.session.dataStorage.deadline }
                `)
                //await TaskModel.create({ priority: this.priority, dateEnd: this.deadline, worker: this.worker, text: this.task, initiator: ctx.from.id, isDone: false})
                //ctx.scene.leave()
                ctx.scene.enter('isOk')
            }
        })

        // deadline.on('message', (ctx) => {
        //     ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        //     ctx.scene.reenter()
        // })
        return deadline

    }


    //---------------------------------------------------------------

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å

    //--------------------------------------------------------------


    IsOkGen(){
        const isOk = new BaseScene('isOk')

        isOk.enter(async (ctx) => {
            await ctx.reply('–í—Å–µ –≤–µ—Ä–Ω–æ?', isOkKeyboard)
        })

    
        isOk.on('callback_query', async (ctx) => {
            
            const ok = String(ctx.callbackQuery.data)

            if(ok === '‚úÖ'){

                await TaskModel.create({

                    priority: ctx.session.dataStorage.priority,
                    dateEnd: ctx.session.dataStorage.deadline,
                    worker: ctx.session.dataStorage.user.fullName,
                    text: ctx.session.dataStorage.task,
                    initiator: ctx.from.id,
                    isDone: false,
                    chatId: ctx.session.dataStorage.user.chatId
                    
                })

                ctx.reply('–ì–æ—Ç–æ–≤–æ!')

                let sender = ''

                if(!ctx.from.last_name){
                    sender = ctx.from.first_name
                } else sender = `${ctx.from.first_name} ${ctx.from.last_name}`

                ctx.telegram.sendMessage(ctx.session.dataStorage.user.chatId, `
                \n–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç ${sender}
                \n–ó–∞–¥–∞–Ω–∏–µ: ${ ctx.session.dataStorage.task }
                \n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${ ctx.session.dataStorage.user.fullName }
                \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ ctx.session.dataStorage.priority }
                \n–î–µ–¥–ª–∞–π–Ω: ${ ctx.session.dataStorage.deadline }
                `)

                ctx.scene.leave()

            } else if(ok === '‚ùå'){
               
                await ctx.reply('–ü–æ–≤—Ç–æ—Ä–∏–º')

                ctx.scene.enter('task')

            }
        })
    

        isOk.on('message', (ctx) => {
            ctx.reply('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            ctx.scene.reenter()
        })
        return isOk
    }

    //---------------------------------------------------------------

    //–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è

    //--------------------------------------------------------------


    OutboundGen(){

        const outbound = new BaseScene('outbound')
        
        outbound.enter(async (ctx) => {
            
            const task = await TaskModel.findAll({
                where: {
                    initiator: ctx.from.id
                }
            })

            if(task.length == 0){
                await ctx.reply('–ù–µ—Ç—É –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π')
            } else {

                await ctx.reply('–ó–∞–¥–∞–Ω–∏—è, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã–µ –º–Ω–æ—é:')
                
                for(let i = 0; i < task.length; i++){
                

                    const deleteKeyboard = Keyboard.make([
                        [Key.callback('üóë', task[i].dataValues.id)],
                      ]).inline()


                    await ctx.reply(`
                        \n–ó–∞–¥–∞–Ω–∏–µ: ${task[i].dataValues.text},
                        \n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task[i].dataValues.worker},
                        \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task[i].dataValues.priority},
                        \n–î–µ–¥–ª–∞–π–Ω: ${task[i].dataValues.dateEnd},
                        \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${task[i].dataValues.isDone},
                        \n–í—Ä–µ–º—è –°–æ–∑–¥–∞–Ω–∏—è: ${task[i].dataValues.createdAt}
                    `,
                    deleteKeyboard)
                    
                }
            }
        })

        outbound.on('callback_query', async (ctx) => {

            
            if(ctx.callbackQuery.data){
                try {

                    TaskModel.destroy({
                        where: {
                            id: ctx.callbackQuery.data
                        }
                    })
                    await ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –£–¥–∞–ª–µ–Ω–æ!')
                    ctx.scene.enter('outbound')
                    //ctx.scene.leave()
            
                } catch (e) {
                    console.log(e);
                }

                //await ctx.scene.leave()
            } else await ctx.reply('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa')
            ctx.scene.leave()
        })
    
        return outbound

    }

    //---------------------------------------------------------------

    //–í—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è

    //--------------------------------------------------------------

    IncomingGen(){
        const incoming = new BaseScene('incoming')
        
        incoming.enter(async (ctx) => {
            ctx.reply(ctx.from.id)
            
            const incomingTask = await TaskModel.findAll({
                where: {
                    chatId: ctx.from.id,
                    isDone: false
                }
            })


            if(incomingTask.length == 0){
                //await ctx.reply(ctx.from.id)
                await ctx.reply('–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π')
            } else {

                await ctx.reply('–í—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è: ')

                for(let i = 0; i < incomingTask.length; i++){

            
                    const doneKeyboard = Keyboard.make([
                        [Key.callback('–û—Ç–º–µ—Ç–∏—Ç—å –í—ã–ø–æ–ª–Ω–µ–Ω—ã–º', incomingTask[i].dataValues.id)],
                    ]).inline()

                    const user = await UserModel.findOne({
                        where: {
                            chatId: incomingTask[i].dataValues.initiator,
                        }
                    })


                    await ctx.reply(`
                        \n–ó–∞–¥–∞–Ω–∏–µ: ${incomingTask[i].dataValues.text},
                        \n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user.fullName},
                        \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${incomingTask[i].dataValues.priority},
                        \n–î–µ–¥–ª–∞–π–Ω: ${incomingTask[i].dataValues.dateEnd},
                        \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${incomingTask[i].dataValues.isDone},
                        \n–í—Ä–µ–º—è –°–æ–∑–¥–∞–Ω–∏—è: ${incomingTask[i].dataValues.createdAt}
                    `,
                    doneKeyboard)
                    
            
                }
                
            }
        })

        incoming.on('callback_query', async (ctx) => {
                
                            
            if(ctx.callbackQuery.data){
                try {

                    const incomingTask = await TaskModel.findOne({
                        where: {
                            id: ctx.callbackQuery.data
                        }
                    })

                    incomingTask.isDone = true

                    await incomingTask.save();
                    await ctx.reply('–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏!')

                    let sender = ''
                    if(!ctx.from.last_name){
                        sender = ctx.from.first_name
                    } else sender = `${ctx.from.first_name} ${ctx.from.last_name}`

                    ctx.telegram.sendMessage(incomingTask.initiator, `
                    \n${incomingTask.worker} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!
                    \n–ó–∞–¥–∞–Ω–∏–µ: ${ incomingTask.text }
                    \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ incomingTask.priority }
                    \n–î–µ–¥–ª–∞–π–Ω: ${ incomingTask.dateEnd }
                    `)

                    // ctx.scene.enter('outbound')
                    //ctx.scene.leave()
            
                } catch (e) {
                    console.log(e);
                }

                //await ctx.scene.leave()
            } else await ctx.reply('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa')
            ctx.scene.leave()
        })

        return incoming

    }


    //---------------------------------------------------------------

    //–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è

    //--------------------------------------------------------------

    DoneGen(){

        const done = new BaseScene('done')

        done.enter(async (ctx) => {

            const doneTask = await TaskModel.findAll({
                where: {
                    chatId: ctx.from.id,
                    isDone: true
                }
            })


            if(doneTask.length == 0){
                //await ctx.reply(ctx.from.id)
                await ctx.reply('–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π')
            } else {

                await ctx.reply('–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π')

                for(let i = 0; i < doneTask.length; i++){


                    const user = await UserModel.findOne({
                        where: {
                            chatId: doneTask[i].dataValues.initiator,
                        }
                    })


                    await ctx.reply(`
                        \n–ó–∞–¥–∞–Ω–∏–µ: ${doneTask[i].dataValues.text},
                        \n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user.fullName},
                        \n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${doneTask[i].dataValues.priority},
                        \n–î–µ–¥–ª–∞–π–Ω: ${doneTask[i].dataValues.dateEnd},
                        \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${doneTask[i].dataValues.isDone},
                        \n–í—Ä–µ–º—è –°–æ–∑–¥–∞–Ω–∏—è: ${doneTask[i].dataValues.createdAt}
                    `)
                    
            
                }

            }

        })

        return done

    }


}



//keyboards

    
const priorityKeyboard = Keyboard.make([
    [Key.callback('–í—ã—Å–æ–∫–æ','–í—ã—Å–æ–∫–æ')],
    [Key.callback('–°—Ä–µ–¥–Ω–µ','–°—Ä–µ–¥–Ω–µ')],
    [Key.callback('–ù–∏–∑–∫–æ','–ù–∏–∑–∫–æ')],
  ]).inline()


const isOkKeyboard = Keyboard.make([
    [Key.callback('‚úÖ','‚úÖ')],
    [Key.callback('‚ùå','‚ùå')]
  ]).inline()

// const deleteKeyboard = Keyboard.make([
//     [Key.callback('üóë','üóë')],
//   ]).inline()


module.exports = ScenesGenerator